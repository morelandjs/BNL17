#!/usr/bin/env python3

from itertools import chain
import os
import sys
import subprocess

import matplotlib.pyplot as plt
import matplotlib.gridspec as gs
from matplotlib.colors import LinearSegmentedColormap
import numpy as np

import h5py
from scipy import ndimage

aspect = 1/1.618
resolution = 72.27
textwidth = 364.19536/resolution
textheight = 273.14662/resolution

def run_cmd(*args, **kwargs):
    print(*args, flush=True)

    subprocess.check_call(
        list(chain.from_iterable(a.split() for a in args)),
        **kwargs
    )

def trento(w=1, v=0.3, m=1, seed=99, fname='initial.hdf'):
    try:
        os.remove(fname)
    except:
        pass

    run_cmd(
        'trento Pb Pb',
        '--random-seed {}'.format(seed),
        '--nucleon-width {}'.format(w),
        '--parton-width {}'.format(v),
        '--parton-number {}'.format(m),
        '--fluctuation 9999',
        '--nucleon-min-dist 1',
        '--grid-max 11.9 --grid-step 0.02',
        '--b-max 0',
        '--output {}'.format(fname)
    )

    with h5py.File(fname, 'r') as f:
        for ev in f.values():
            dim = set(ev.shape).pop()
            aspect = textheight/textwidth
            h = int(dim/2.7)
            w = int(h/aspect/3)*3
            trim = int((dim - w)/2.)
            return np.array(ev[:h,trim:-trim])

def main():
    slices = 2
    fig, axes = plt.subplots(
        ncols=slices, sharey=True,
        figsize=(textwidth, textheight)
    )

    cdict = plt.cm.Blues._segmentdata.copy()
    cdict['red'][0] = (0, 1, 1)
    cdict['blue'][0] = (0, 1, 1)
    cdict['green'][0] = (0, 1, 1)
    cdict['red'][1] = (0, 1, 1)
    cdict['blue'][1] = (0, 1, 1)
    cdict['green'][1] = (0, 1, 1)
    my_cmap = LinearSegmentedColormap('Blues2', cdict)

    npartons = [20, 1]
    parton_width = [0.15, 0.5] 

    for i, (ax, m, v) in enumerate(zip(axes, npartons, parton_width)):
        event = trento(w=0.5, m=m, v=v, seed=2)
        sliver = np.split(event, slices, axis=1)[i]
        ax.imshow(sliver, cmap=my_cmap, vmin=0, vmax=2.8,
                  interpolation='none')
        ax.get_xaxis().set_visible(False)
        ax.get_yaxis().set_visible(False)
        ax.axis('off')
   
    plt.tight_layout(pad=0, w_pad=-0.4, h_pad=0)
    plt.savefig('cover.pdf')

if __name__ == "__main__":
    main()
